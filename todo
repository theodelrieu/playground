class BasicCodec<Encoder, Decoder>

func encode<T>(Iterable);
func encode<T>(Iterator, Sentinel);
func decode<T>(Iterable);
func decode<T>(Iterator, Sentinel);

-> class Encoder -> Iterable;
-> class Decoder -> Iterable;


Un Decoder qui veut tout copier pour aller plus vite retourne un iterator different que celui de son input source
Il utilise un adapteur Iterable qui prend un Iterable 

Pas la peine de contraindre Encoder <=> Decoder.

Gerer conversion de UDT ?

=======================================================================================

remove some detail folders?

think about namespaces:

look at static_vector in boost containers
having an InputTransformerBlock that returns array<char, 4> (base64)
and the InputTransformer deals with iterators and such

#include <mgs/base64.hpp> // umbrella

#include <mgs/base64/base64.hpp>
#include <mgs/base64/base64url.hpp>

// codecs

mgs::base64
mgs::base64url
mgs::base64url_unpadded

encoders are left in detail, aliased inside codec, and exposed via getters.
