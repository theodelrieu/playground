class BasicCodec<Encoder, Decoder>

func encode<T>(Iterable);
func encode<T>(Iterator, Sentinel);
func decode<T>(Iterable);
func decode<T>(Iterator, Sentinel);

-> class Encoder -> Iterable;
-> class Decoder -> Iterable;


Un Decoder qui veut tout copier pour aller plus vite retourne un iterator different que celui de son input source
Il utilise un adapteur Iterable qui prend un Iterable 

Dans un premier temps, ecrire tous les iterateurs a la main.
Ensuite CRTP.

Pas la peine de contraindre Encoder <=> Decoder.

Responsabilite du programmeur de s'assurer que les 2 implementent le meme algo.

Le use-case pour en remplacer un par un autre ? Speed ? Differents iterateurs ?


codec variant:
Detail d'implem, exe: BaseEncoder<stuff::base64>, BaseEncoder<stuff::base64_url>

replace 4 with npos or smth like that

sized sentinel

concepts randomaccessiterator ...
